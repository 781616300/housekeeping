<wxs src="../../common/wxs/touch-move.wxs" module="touch"></wxs>
<view class="container">
    <view class="tabs">
        <block wx:for="{{tabs}}" wx:key="index">
            <view data-index="{{index}}" bind:tap="handleTabChange" class="tab-item">
                <view class="tab-label {{currentTabIndex === index ? 'active-tab' : ''}}">{{item}}</view>
                <view hidden="{{currentTabIndex !== index}}" class="divider"></view>
            </view>
        </block>
    </view>
    <slot name="extend"></slot>
    <!-- fly 往左滑动/往右滑动-->
    <!-- fly
    使用wxs的场景主要包括但不限于以下几点：
        1.性能优化：当你需要在视图层进行数据处理，而这些处理不需要与后端数据交互或不依赖于小程序的生命周期函数时，使用wxs可以减少数据在视图层和逻辑层之间的传输，提高应用性能。
        2.简化数据处理：对于一些简单的数据格式化（如日期、金额格式化），使用wxs可以直接在视图层完成，无需通过逻辑层处理后再传递给视图层。
        3.实现复杂的视图逻辑：对于一些需要在视图层实现的复杂逻辑，如自定义动画效果、触摸事件处理（如滑动、拖拽等），wxs提供了一种更加高效和便捷的实现方式。
        4.减少逻辑层与视图层的通信：当你的页面或组件中存在大量需要实时更新的动态数据时，频繁地在逻辑层与视图层之间传递数据会影响性能。此时，可以考虑使用wxs在视图层直接处理这部分逻辑。
        5.提高代码的可维护性：将与视图展示直接相关的逻辑通过wxs在视图层处理，可以使得页面的逻辑层代码更加专注于数据处理和业务逻辑，提高整体代码的可维护性。
    -->
    <view class="tab-panel" bind:touchstart="{{touch.handleTouchstart}}" bind:touchend="{{touch.handleTouchend}}">
        <slot name="panel"></slot>
    </view>
</view>
